; __ENTRY__
0x5020: IMM i 0xb8

0x5023: ADD a c   ; a = 0x39
0x5026: ADD b c   ; b = 0x6d
0x5029: IMM d 0xff ; d = -1
0x502c: ADD a d   ; a = 0x38
0x502f: ADD b d   ; b = 0x6c

0x5032: PUSH a
0x5035: PUSH b

0x5038: LDM a a
0x503b: LDM b b
0x503e: CMP a b

0x5041: POP b
0x5044: POP a

0x5047: IMM d 0x15
0x504a: JMP 0x02 d ; if x goto 0x505f

0x504d: IMM d 0xff
0x5050: ADD c d

0x5053: IMM d 0x00
0x5056: CMP c d ; if c == 0 stop

0x5059: IMM d 0x03
0x505c: JMP 0x02 d
0x505f: POP d
0x5062: POP i

0x5065: IMM a 0x30
0x5068: IMM b 0x64
0x506b: IMM c 0x09
0x506e: IMM d 0x02

0x5071: ADD d i ; i = 0x1C
0x5074: PUSH d  ; d = 0x1E

0x5077: IMM i 0x01

0x507a: IMM c 0x00
0x507d: CMP d c ; if d == 0 : goto print flag? = 0x5101
0x5080: IMM d 0x4b
0x5083: JMP 0x01 d
0x5086: IMM d 0x9b
0x5089: JMP 0x0c d ; if something - probably goto fail challenge

0x508c: PUSH a
0x508f: PUSH b
0x5092: PUSH c

0x5095: POP c
0x5098: POP b
0x509b: POP a

0x509e: IMM i 0x17 ; jump to 0x5065

; function __print_key__ ; prints the string "key: "
0x50a1: PUSH a
0x50a4: PUSH b
0x50a7: PUSH c

0x50aa: IMM b 0x01
0x50ad: ADD b s

0x50b0: IMM d 0x4b
0x50b3: PUSH d
0x50b6: IMM d 0x45
0x50b9: PUSH d
0x50bc: IMM d 0x59
0x50bf: PUSH d
0x50c2: IMM d 0x3a
0x50c5: PUSH d
0x50c8: IMM d 0x20
0x50cb: PUSH d

0x50ce: IMM c 0x05
0x50d1: IMM a 0x01
0x50d4: SYS 0x04 d ; (sys_write)

0x50d7: POP c
0x50da: POP b
0x50dd: POP a

; function __read_from_stdin__
0x50e0: PUSH a
0x50e3: PUSH b
0x50e6: PUSH c

0x50e9: IMM b 0x30
0x50ec: IMM c 0x0b
0x50ef: IMM a 0x00
0x50f2: SYS 0x01 d ; (sys_read_mem)

0x50f5: POP c
0x50f8: POP b
0x50fb: POP a

0x50fe: IMM i 0x24  ; jump to 0x508c


0x5101: IMM b 0x01
0x5104: ADD b s
0x5107: IMM d 0x43
0x510a: PUSH d
0x510d: IMM d 0x4f
0x5110: PUSH d
0x5113: IMM d 0x52
0x5116: PUSH d
0x5119: IMM d 0x52
0x511c: PUSH d
0x511f: IMM d 0x45
0x5122: PUSH d
0x5125: IMM d 0x43
0x5128: PUSH d
0x512b: IMM d 0x54
0x512e: PUSH d
0x5131: IMM d 0x21
0x5134: PUSH d
0x5137: IMM d 0x20
0x513a: PUSH d
0x513d: IMM d 0x59
0x5140: PUSH d
0x5143: IMM d 0x6f
0x5146: PUSH d
0x5149: IMM d 0x75
0x514c: PUSH d
0x514f: IMM d 0x72
0x5152: PUSH d
0x5155: IMM d 0x20
0x5158: PUSH d
0x515b: IMM d 0x66
0x515e: PUSH d
0x5161: IMM d 0x6c
0x5164: PUSH d
0x5167: IMM d 0x61
0x516a: PUSH d
0x516d: IMM d 0x67
0x5170: PUSH d
0x5173: IMM d 0x3a
0x5176: PUSH d
0x5179: IMM d 0x0a
0x517c: PUSH d
0x517f: IMM c 0x14
0x5182: IMM a 0x01
0x5185: SYS 0x04 d ; (sys_write)
0x5188: IMM d 0x2f
0x518b: IMM c 0x80
0x518e: STM c d
0x5191: IMM d 0x66
0x5194: IMM c 0x81
0x5197: STM c d
0x519a: IMM d 0x6c
0x519d: IMM c 0x82
0x51a0: STM c d
0x51a3: IMM d 0x61
0x51a6: IMM c 0x83
0x51a9: STM c d
0x51ac: IMM d 0x67
0x51af: IMM c 0x84
0x51b2: STM c d
0x51b5: IMM d 0x00
0x51b8: IMM c 0x85
0x51bb: STM c d
0x51be: IMM a 0x80
0x51c1: IMM b 0x00
0x51c4: SYS 0x08 d ; (sys_open)
0x51c7: IMM b 0x00
0x51ca: ADD b s
0x51cd: IMM c 0xff
0x51d0: IMM a 0x00
0x51d3: ADD a d
0x51d6: SYS 0x01 d ; (sys_read_mem)
0x51d9: IMM b 0x00
0x51dc: ADD b s
0x51df: IMM c 0x00
0x51e2: ADD c d
0x51e5: IMM a 0x01
0x51e8: SYS 0x04 d ; (sys_write)
0x51eb: IMM a 0x00
0x51ee: SYS 0x10 ; (sys_exit)
0x51f1: IMM b 0x01
0x51f4: ADD b s
0x51f7: IMM d 0x49
0x51fa: PUSH d
0x51fd: IMM d 0x4e
0x5200: PUSH d
0x5203: IMM d 0x43
0x5206: PUSH d
0x5209: IMM d 0x4f
0x520c: PUSH d
0x520f: IMM d 0x52
0x5212: PUSH d
0x5215: IMM d 0x52
0x5218: PUSH d
0x521b: IMM d 0x45
0x521e: PUSH d
0x5221: IMM d 0x43
0x5224: PUSH d
0x5227: IMM d 0x54
0x522a: PUSH d
0x522d: IMM d 0x21
0x5230: PUSH d
0x5233: IMM d 0x0a
0x5236: PUSH d
0x5239: IMM c 0x0b
0x523c: IMM a 0x01
0x523f: SYS 0x04 d ; (sys_write)
0x5242: IMM a 0x01
0x5245: SYS 0x10 ; (sys_exit)

; FUNCTION __MAIN__
0x5248: IMM d 0x37
0x524b: IMM c 0x62
0x524e: STM c d

0x5251: IMM d 0xc3
0x5254: IMM c 0x63
0x5257: STM c d

0x525a: IMM d 0x11
0x525d: IMM c 0x64
0x5260: STM c d

0x5263: IMM d 0x72
0x5266: IMM c 0x65
0x5269: STM c d

0x526c: IMM d 0x90
0x526f: IMM c 0x66
0x5272: STM c d

0x5275: IMM d 0x61
0x5278: IMM c 0x67
0x527b: STM c d

0x527e: IMM d 0xec
0x5281: IMM c 0x68
0x5284: STM c d

0x5287: IMM d 0x3d
0x528a: IMM c 0x69
0x528d: STM c d

0x5290: IMM d 0xc2
0x5293: IMM c 0x6a
0x5296: STM c d

0x5299: IMM d 0x4b
0x529c: IMM c 0x6b
0x529f: STM c d

0x52a2: IMM d 0x7e
0x52a5: IMM c 0x6c
0x52a8: STM c d

0x52ab: IMM i 0x2b ; 0x2b * 3 + 0x5020 = 0x50A1
